/*!
 * audioPlayer v1.0.4 ~ Copyright (c) 2018 Xzavier, https://github.com/xiaohuazheng/audioplayer
 * Released under MIT license
 */
! function(t, a, e, i) {
    if (!t("#ppq-audio-player-style").length) {
        t("body").prepend('<style id="ppq-audio-player-style" type="text/css">\t\t\thtml{font-size:14px}\t\t\tbody{margin:0;padding:0;border:0;word-wrap:break-word;word-break:break-all;-webkit-text-size-adjust:100%;-moz-text-size-adjust:100%;-ms-text-size-adjust:100%;text-size-adjust:100%;}\t\t\ta, button, input, select, textarea{-webkit-tap-highlight-color:transparent}\t\t\tol, ul {list-style:none;}\t\t\t.audio-hidden{width:0;height:0;visibility:hidden}\t\t\t.ppq-audio-player .play-pause-btn .play-pause-icon:after{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}\t\t\t.ppq-audio-player .play-pause-btn .play-pause-icon:after,.ppq-audio-player.player-playing .play-pause-icon:after{background-image:url(../files/images/play-pause.png);background-size:37px 18px}\t\t\t.ppq-audio-player{line-height:40px;position:relative;overflow:hidden;margin:0 auto;background:white}\t\t\t.ppq-audio-player audio{position:absolute;vertical-align:baseline}\t\t\t.ppq-audio-player .play-pause-btn{float:left;}\t\t\t.ppq-audio-player .play-pause-btn .play-pause-icon{position:relative;display:block;width:25px;height:25px;border:3px solid #d59f53;border-radius:100%;background-color:#fff}\t\t\t.ppq-audio-player .play-pause-btn .play-pause-icon:after{display:block;content:"";background-position:0 0;width:17px;height:18px}\t\t\t.ppq-audio-player.player-playing .play-pause-icon:after{background-position:-25px 0;width:12px;height:17px}\t\t\t.ppq-audio-player .player-time{float:left;width:51px;margin-right:8px;text-align:right}\t\t\t.ppq-audio-player .player-time-duration{float:right;margin:0 0 0 8px;text-align:left}\t\t\t.ppq-audio-player .player-bar{position:relative;overflow:hidden;height:5px; margin-top: 18px;background-color:#fff}\t\t\t.ppq-audio-player .player-bar .player-bar-loaded{position:absolute;top:0;left:0;width:100%;height:100%;border-radius:3px;background:#ddd}\t\t\t.ppq-audio-player .player-bar .player-bar-played{position:absolute;top:0;left:0;width:0;height:100%;border-radius:3px;background:#d59f53}\t\t\t</style>')
    }
    var r = "ontouchstart" in a,
        n = r ? "touchstart" : "mousedown",
        p = r ? "touchmove" : "mousemove",
        o = r ? "touchcancel" : "mouseup",
        l = ["webkit", "moz", "ms", "o"],
        d = y();

    function s(t) {
        var a = Math.floor(t / 60),
            e = Math.floor(t - 60 * a);
        return (a < 10 ? "0" + a : a) + ":" + (e < 10 ? "0" + e : e)
    }

    function u(t) {
        if (!t) return !1;
        var a = e.createElement("audio");
        if ("function" != typeof a.canPlayType) return !1;
        var i = a.canPlayType("audio/" + t.split(".").pop().toLowerCase());
        return "probably" === i || "maybe" === i
    }

    function y() {
        if ("hidden" in e) return "hidden";
        for (var t = 0; t < l.length; t++)
            if (l[t] + "Hidden" in e) return l[t] + "Hidden";
        return null
    }
    t.fn.initAudioPlayer = function() {
        return this.each(function() {
            if ("audio" === t(this).prop("tagName").toLowerCase()) {
                var i = t(this),
                    c = i.attr("src"),
                    f = !1;
                if (u(c) ? f = !0 : i.find("source").each(function() {
                        if (u(t(this).attr("src"))) return f = !0, !1
                    }), f) {
                    var h = t('<div class="ppq-audio-player">' + t("<div>").append(i.eq(0).clone()).html() + '<div class="play-pause-btn" id="showdivs"><a href="javascript: void(0);" class="play-pause-icon"></a></div></div>'),
                        b = h.find("audio")[0];
                    h.find("audio").addClass("audio-hidden"), h.append('<div class="player-time player-time-current"></div>\t\t\t\t<div class="player-time player-time-duration"></div>\t\t\t\t<div class="player-bar">\t\t\t\t\t<div class="player-bar-loaded"></div>\t\t\t\t\t<div class="player-bar-played"></div>\t\t\t\t</div>');
                    var v = h.find(".player-bar"),
                        g = h.find(".player-bar-played"),
                        A = h.find(".player-bar-loaded"),
                        m = h.find(".player-time-current"),
                        q = h.find(".player-time-duration");
                    if (m.html("00:00"), q.html("&hellip;"), b.addEventListener("loadeddata", function() {
                            var a = setInterval(function() {
                                if (b.buffered.length < 1) return !0;
                                A.width(b.buffered.end(0) / b.duration * 100 + "%"), Math.floor(b.buffered.end(0)) >= Math.floor(b.duration) && clearInterval(a)
                            }, 100);
                            q.html(t.isNumeric(b.duration) ? s(b.duration) : "&hellip;")
                        }), b.addEventListener("timeupdate", function() {
                            m.html(s(b.currentTime)), g.width(b.currentTime / b.duration * 100 + "%")
                        }), b.addEventListener("ended", function() {
                            h.removeClass("player-playing").addClass("player-paused")
                        }), v.on(n, function(t) {
                            b.currentTime = w(t), v.on(p, function(t) {
                                b.currentTime = w(t)
                            })
                        }).on(o, function() {
                            v.unbind(p)
                        }), h.find(".play-pause-btn").on("click", function() {
                            return h.hasClass("player-playing") ? (h.removeClass("player-playing").addClass("player-paused"), b.pause()) : (h.addClass("player-playing").removeClass("player-paused"), b.play()), !1
                        }), i.replaceWith(h), d) {
                        var x = d.replace(/[H|h]idden/, "") + "visibilitychange";
                        e.addEventListener(x, function() {
                            ((function() {
                                var t = y();
                                if (!t) return !1;
                                return e[t]
                            })() || "hidden" === function() {
                                if ("visibilityState" in e) return "visibilityState";
                                for (var t = 0; t < l.length; t++)
                                    if (l[t] + "VisibilityState" in e) return l[t] + "VisibilityState";
                                return null
                            }()) && (h.removeClass("player-playing").addClass("player-paused"), b.pause())
                        }, !1)
                    }
                    a.addEventListener("beforeunload", function() {
                        h.removeClass("player-playing").addClass("player-paused"), b.pause()
                    }, !1)
                }
            }

            function w(t) {
                var a = r ? t.originalEvent.touches[0] : t;
                return Math.round(b.duration * (a.pageX - v.offset().left) / v.width())
            }
        }), this
    }
}(jQuery, window, document);